# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Nightly Build for Develop

on:
  workflow_dispatch:

  schedule:
    - cron: '50 0 * * 1-5'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Update_project:
    name: Automatically update Project dependencies
    runs-on: windows-latest

    strategy:
      fail-fast: false

    steps:
      # Add token here to enable this workflow to trigger other workflows on PUSH, such as maven-feature-build.yml
      - name: Clone the source code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Java JDK and Maven
        uses: ./.github/actions/setup_mvnw

      - name: Update Project Dependencies
        run: |
          mvn versions:update-properties@update-properties-latest -U -s .mvn/wrapper/settings.xml
          $POM_CHANGED=git status --porcelain
          echo "update-properties completed-------------------"
          if ( $POM_CHANGED -like '*pom.xml*' )
          {
            echo "code_changed=$POM_CHANGED" >> $env:GITHUB_ENV            
          }

      - name: Create Auto-Version Branch from Develop
        if: ${{ env.code_changed }}
        run: |
          git switch develop
          git checkout -b feature/auto-version-${{ github.run_number }}

      - name: Commit POM changes
        if: ${{ env.code_changed }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m 'POM versions changed'

      - name: Check for already existing Pull Request
        if: ${{ env.code_changed }}
        run: |
          $SEARCH_RESULTS=(gh pr list --search "Maven POM auto updates into Develop")
          $SPLIT=($SEARCH_RESULTS -split "`t")
          $PREV_AUTO_VER_PR=$SPLIT[0]
          $PREV_AUTO_VER_BRANCH=$SPLIT[2]
          echo "Previous Auto Version Pull Request = $PREV_AUTO_VER_PR"
          echo "Previous Auto Version Branch = $PREV_AUTO_VER_BRANCH"
          if ( $PREV_AUTO_VER_BRANCH ) {
            $DIFF=(git diff feature/auto-version-${{ github.run_number }} origin/$PREV_AUTO_VER_BRANCH)
            if ( !$DIFF ) {
              echo "There's no additional POM changes.  No new Pull Request needed."
              $STOP=1
              echo "stop=$STOP" >> $env:GITHUB_ENV
            }
            else {
              echo "Additional POM changes detected.  Deleting old Pull Request and Branch."
              gh pr comment $PREV_AUTO_VER_PR --body "Additional POM changes needed since creation of this Pull Request.  Closing this Pull Request and opening a new one.  [This is an automated message]"
              gh pr close $PREV_AUTO_VER_PR --delete-branch
            }
          }
          else {
            echo "No open Automatic POM changes Pull Request detected."
          }

      - name: Push POM Changes to GitHub
        if: ${{ env.code_changed && !env.stop }}
        run: git push --set-upstream origin feature/auto-version-${{ github.run_number }}

      # See: https://cli.github.com/manual/
      - name: Create pull request for Auto-Version into Develop
        if: ${{ env.code_changed && !env.stop }}
        run: >
          gh pr create
          --base develop
          --head feature/auto-version-${{ github.run_number }}
          --title "$(date +'%m-%d-%Y') - Maven POM auto updates into Develop"
          --body "Created by Scheduled GitHub action"

  Calc_project_build:
    name: Calculate Project Build Number
    runs-on: windows-latest
    needs: [ Update_project ]

    strategy:
      fail-fast: false

    outputs:
      project_build: ${{ steps.calc_build_number.outputs.project_build }}

    steps:
      - name: Clone the source code
        uses: actions/checkout@v3

      - name: Setup Java JDK and Maven
        uses: ./.github/actions/setup_mvnw

      - name: Get current project snapshot
        id: calc_build_number
        run: |
          $CURRENT_PROJECT_VERSION=mvn help:evaluate -Dexpression="project.version" -q -DforceStdout
          $PROJECT_BUILD=$CURRENT_PROJECT_VERSION
          echo "project_build=$PROJECT_BUILD" >> $env:GITHUB_OUTPUT

  Unit_test_project:
    name: Project Unit Tests and CodeQL Scan
    runs-on: windows-latest
    needs: [ Calc_project_build ]

    strategy:
      fail-fast: false

    steps:
      - name: Clone the source code
        uses: actions/checkout@v3

      - name: Setup Java JDK and Maven
        uses: ./.github/actions/setup_mvnw

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
            maven-${{ runner.os }}-
            maven-

#      - name: Initialize CodeQL
#        uses: github/codeql-action/init@v2
#        with:
#          languages: java

      - name: Run Project Unit Tests
        run: mvn --batch-mode clean package

#      - name: Perform CodeQL Analysis
#        uses: github/codeql-action/analyze@v2

  Build_project:
    runs-on: windows-latest
    needs: [ Calc_project_build ]

    strategy:
      fail-fast: false

    steps:
      - name: Clone the source code
        uses: actions/checkout@v3

      - name: Setup Java JDK and Maven
        uses: ./.github/actions/setup_mvnw

      # Required for Project to build *.exe installer
      - name: Install NSIS if not cached
        uses: ./.github/actions/install_nsis

      # FIXME: Change this back to deploy in the LIVE codebase.
      - name: Deploy ${{ needs.Calc_project_build.outputs.project_build }} with Maven
        run: |
          $PROJECT_BUILD="${{ needs.Calc_project_build.outputs.project_build }}"
          echo "Build number will be $PROJECT_BUILD"
          mvn versions:set -DnewVersion="$PROJECT_BUILD" versions:commit
          mvn --batch-mode clean install -DskipTests

      # Create Project exe file using NSIS
#      - name: Create Project installer
#        run: |
#          $PROJECT_BUILD="${{ needs.Calc_project_build.outputs.project_build }}"
#          & 'C:\Program Files (x86)\NSIS\makensis.exe' /DMIM_FILENAME="D:\a\project-testing\project-testing\project-build\project.zip" /DVERSION_NUMBER="$PROJECT_BUILD" /DPRODUCT_VERSION="$PROJECT_BUILD" "D:\a\project-testing\project-testing\installer\project\project.nsi"

      # FIXME: Change this back to deploy in the LIVE codebase.
#      - name: Copy and Upload Project zip, exe, and setupexe via Maven
#        run: |
#          $PROJECT_BUILD="${{ needs.Calc_project_build.outputs.project_build }}"
#          mkdir staging
#          copy "D:/a/project-testing/project-testing/project-build/*.zip" staging
#          copy "D:/a/project-testing/project-testing/installer/project/*.exe" staging
#          copy "D:\a\project-testing\project-testing\installer\project\projectsetup-$PROJECT_BUILD.exe" "D:\a\project-testing\project-testing\staging\project.exe"
#          ./mvnw --batch-mode -f "uploadzip.xml" clean install -Drevision="$PROJECT_BUILD" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadexe.xml" clean install -Drevision="$PROJECT_BUILD" -s .mvn/wrapper/settings.xml
#          ./mvnw --batch-mode -f "uploadsetupexe.xml" clean install -Drevision="$PROJECT_BUILD" -s .mvn/wrapper/settings.xml

#      - name: Upload Project artifacts to Github
#        uses: actions/upload-artifact@v3
#        with:
#          name: Project-${{ needs.Calc_project_build.outputs.project_build }}_Package
#          path: staging