# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Create Release from Develop

# Purpose: This will create a release branch using the latest code from Develop.
#          It will also bump the project.version of Develop's pom.xml by 1 minor version via Pull Request.
#
# Note: THIS WORKFLOW WILL NOT CREATE A RELEASE BUILD.  maven-feature-build.yml will create the build when the new 'release/' branch is created and pushed.
#
# Steps:
#   Create a Release branch
#     1. Checkout Master.
#     2. Get the current project.version from the pom.xml in Develop.
#     3. Create a release branch from Develop using the version number from the pom.
#     4. Create a Pull Request to merge the newly created Release branch into Master.
# Create a Feature branch to increment Develop
#     1. Increment the pom version by 1 minor version.  Reset Patch version to 0.  Change Qualifier to -SNAPSHOT.
#     2. Create a feature branch to bump Develop's version.
#     3. Set the project.version and commit the pom.xml change to the feature branch.
#     4. Create a pull request to bump the version number.
on: workflow_dispatch

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Create_Release:
    name: Create Release branch from latest Develop
    runs-on: windows-latest
    steps:
      # Add token here to enable this workflow to trigger other workflows on PUSH, such as maven-feature-build.yml
      - name: Clone the source code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Setup Java JDK and Maven
        uses: ./.github/actions/setup_mvnw

      # $CURRENT_PROJECT_VERSION should be <project.version> without -SNAPSHOT, eg "1.0.245-SNAPSHOT" would be "1.0.245".
      # $PROJECT_BUILD should be <project.version> with a new qualifier of '-r[Date_Time of commit].[commit short sha]', eg "1.0.245-r20220914_1547.abcdef"
      - name: Calculate Release Version
        run: |
          $CURRENT_PROJECT_VERSION=(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout).Trim("-SNAPSHOT")
          $COMMIT_DATETIME=(git log -n 1 --pretty=format:"%cd" --date='format:%Y%m%d_%H%M%S')
          $COMMIT_SHA=(git rev-parse --short HEAD)
          $PROJECT_BUILD=$CURRENT_PROJECT_VERSION+'-r'+$COMMIT_DATETIME+'.'+$COMMIT_SHA
          echo "Release branch will be tagged $CURRENT_PROJECT_VERSION after completion."
          echo "Release build will be $PROJECT_BUILD after completion."
          echo "project_version=$CURRENT_PROJECT_VERSION" >> $env:GITHUB_ENV
          echo "project_build=$PROJECT_BUILD" >> $env:GITHUB_ENV
      - name: Create Release Branch from Develop
        run: |
          git switch develop
          git checkout -b release/${{ env.project_version }}
          git push --set-upstream origin release/${{ env.project_version }}

      # See: https://cli.github.com/manual/
      - name: Create pull request for Release into Master
        run: >
          gh pr create
          --base master
          --head release/${{ env.project_version }}
          --title "Merge ${{ env.project_version }} into Master"
          --body "Created by GitHub action"
      - name: Reminder - This workflow does not create a build.  Please check the
          Action for the release/${{ env.project_version }} branch.
        run: |
          echo "The release build should be under the action for the release/${{ env.project_version }} branch."
          echo "The action should be named 'Build for release/${{ env.project_version }} branch.'"
          echo "The release build should be ${{ env.project_build }}"
      - name: Calculate next Develop version
        run: |
          $CURRENT_PROJECT_VERSION=mvn help:evaluate -Dexpression="project.version" -q -DforceStdout
          $MAJOR=mvn build-helper:parse-version -D"version.version"=$CURRENT_PROJECT_VERSION help:evaluate -Dexpression="parsedVersion.majorVersion" -q -DforceStdout
          $MINOR=mvn build-helper:parse-version -D"version.version"=$CURRENT_PROJECT_VERSION help:evaluate -Dexpression="parsedVersion.nextMinorVersion" -q -DforceStdout
          $NEXT_VERSION=$MAJOR+'.'+$MINOR+'.0-SNAPSHOT'
          echo "Current version is $CURRENT"
          echo "Develop will be bumped to $NEXT_VERSION"
          echo "nextVersion=$NEXT_VERSION" >> $env:GITHUB_ENV
      - name: Create bump Feature Branch from Develop
        run: |
          git switch develop
          git checkout -b feature/${{ env.nextVersion }}
      - name: Bump Develop version to ${{ env.nextVersion }}
        run: |
          mvn versions:set -DnewVersion="${{ env.nextVersion }}" versions:commit
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "POM Develop bumped to ${{ env.nextVersion }}"
          git push --set-upstream origin feature/${{ env.nextVersion }}

      # See: https://cli.github.com/manual/
      - name: Create pull request to Bump version in Develop
        run: >-
          gh pr create
          --base develop
          --head feature/${{ env.nextVersion }}
          --title "Bump Develop to ${{ env.nextVersion }}"
          --body "Bump the Develop branch version to ${{ env.nextVersion }}.  This
          is an automated Pull Request created by GitHub action.  Please merge this
          Pull Request AFTER any Release Branch changes are merged."
